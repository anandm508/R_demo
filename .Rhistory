xlab("Transmission") +
ylab("Count of cars")
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of cars by transmission type")
xlab("Transmission")
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission")
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
data = cars,
aes(x = Mileage)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_histogram() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
data = cars,
aes(x = Mileage)) +
geom_histogram(bins = 10) +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_histogram(bins = 10) +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_histogram(bins = 10) +
ggtitle("Distribution of fuel econmoy") +
xlab("Mileage") +
ylab("Count of cars")
# Bar chart of car count and transmission type
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_histogram(bins = 10) +
ggtitle("Distribution of fuel econmoy") +
xlab("Mileage") +
ylab("Count of cars")
cars <- read.table(file = "car_mileage.txt",
header = TRUE,
sep = "\t",
quote = "\"")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_histogram(bins = 10) +
ggtitle("Distribution of fuel econmoy") +
xlab("Mileage") +
ylab("Count of cars")
# Histogram of car and fuel economy
ggplot(
data = cars,
aes(x = Mileage)) +
geom_density() +
ggtitle("Distribution of fuel econmoy") +
xlab("Mileage") +
ylab("Density")
# Scatterolot of cylinders and fuel economy
ggplot(
data = cars,
aes(x = Cylinders, y = Mileage)) +
geom_point() +
ggtitle("Distribution of fuel econmoy") +
xlab("Number of cyliners") +
ylab("Mileage in KM/PL")
# Scatterolot of cylinders and fuel economy
ggplot(
data = cars,
aes(x = Cylinders, y = Mileage)) +
geom_point() +
ggtitle("Fuel Economy by cylinders") +
xlab("Number of cyliners") +
ylab("Mileage in KM/PL")
median(cars$Mileage)
mean(cars$Mileage)
mean(cars$Mileage)
median(cars$Mileage)
data(isis)
data(iris)
head(iris)
library(ggplot2)
# Scatterolot of cylinders and fuel economy
ggplot(
data = cars,
aes(x = Cylinders, y = Mileage)) +
geom_point() +
ggtitle("Fuel Economy by cylinders") +
xlab("Number of cyliners") +
ylab("Mileage in KM/PL")
# Scatterolot of cylinders and fuel economy
ggplot(
data = iris,
aes(x = Petal.length, y = Petal.Width)) +
geom_point() +
ggtitle("Fuel Economy by cylinders") +
xlab("Number of cyliners") +
ylab("Mileage in KM/PL")
# Scatterolot of cylinders and fuel economy
ggplot(
data = iris,
aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
ggtitle("Fuel Economy by cylinders") +
xlab("Number of cyliners") +
ylab("Mileage in KM/PL")
#Create a scatterplot petal length and width
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a linear regression model
model <- lm(formula = Petal.Width~Petal.Length, data = iris)
model
summary(model)
#summarize the data
summary(cars)
summary(model)
View(model)
#Draw a regression line on the plot
line(x = iris$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#Draw a regression line on the plot
line(x = iris$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#Summarize the model
summary(model)
#Draw a regression line on the plot
line(x = iris$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#Draw a regression line on the plot
lines(x = iris$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#Get the correlation between petal length and width
cor(x = iris$Petal.Length, y = iris$Petal.Width)
#Predict new values from the model
predict(object = model, newdata = c(2,5,7))
#Predict new values from the model
predict(object = model, newdata = c(2,5,7))
#Predict new values from the model
predict(object = model, newdata = data.frame(Petal.Length=c(2,5,7)))
install.packages("ffdf")
#Creating a CSV file with iris data.
write.csv(x = iris,
file = "iris.csv",
row.names = FALSE)
library("ffdf")
library("ffds")
install.packages("ff")
library("ff")
irisff <- read.table.ffdf(file = , FUN = "read.csv" )
irisff <- read.table.ffdf(file =iris.csv , FUN = "read.csv" )
irisff <- read.table.ffdf(file = "iris.csv" , FUN = "read.csv" )
irisff
class(irisff)
names(irisff)
#inspect the first five rows
irisff[1:5,]
#load the biglm package
library("biglm")
install.packages("biglm")
#load the biglm package
library("biglm")
#Create a linerar regression model
modelff <- biglm(formula = Petal.Width~Petal.Length, data = irisff)
#Summarize the model
summary(modelff)
#Create a scatterplot petal length and width
plot(x = irisff$Petal.Length,
y = irisff$Petal.Width,
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot petal length and width
plot(x = irisff$Petal.Length,
y = irisff$Petal.Width,
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot petal length and width
plot(x = irisff$Petal.Length[],
y = irisff$Petal.Width[],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
modelff
#Get Y intercept from the model
b = summary(modelff)$mat[1,1]
b
#Get the slope from the model
m = summary(modelff)$mat[1,2]
m
#Get the slope from the model
m = summary(modelff)$mat[2,1]
m
#Draw a regression line on the plot
lines(x = iris$Petal.Length[],
y = m*iris$Petal.Length[] + b,
col = "red",
lwd = 3)
#Predict new values from the model
predict(object = modelff, newdata = data.frame(Petal.Length=c(2,5,7)))
#Predict new values from the model
predict(object = modelff, newdata = data.frame(Petal.Length=c(2,5,7), Petal.Width=c(0,0,0)))
install.packages("tree")
#LOad the data
data(iris)
#LOad the data
data(iris)
#Set a seed to make randomness reproducable
set.seed(42)
#Randomly select 100 indexed out of 150 for training the model
indexes <- sample(x = 1:150,size = 100)
#Print the random indexed
indexes
training <- iris[indexes,]
#Create a test data set
test <- iris[-indexes,]
#Load the descion tree package
library(tree)
library(tree)
#Create a decion tree model
model <- tree(formula = Species~., data =  training)
#Summarize the model
summary(model)
#Visualize the decion tree model
plot(model)
text(model)
#Load the color brewer library
library(RColorBrewer)
#Create a color palatte
pallate<-brewer.pal(n = 3, "Set2")
#Create a scatterplot colored by speices
plot(x = irisff$Petal.Length,
y = irisff$Petal.Width,
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)]
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = TRUE)
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = TRUE)
#LOad the data
data(iris)
#Set a seed to make randomness reproducable
set.seed(42)
#Randomly select 100 indexed out of 150 for training the model
indexes <- sample(x = 1:150,size = 100)
#Print the random indexed
indexes
#Create a traing data set
training <- iris[indexes,]
#Create a test data set
test <- iris[-indexes,]
#Load the descion tree package
library(tree)
#Create a decion tree model
model <- tree(formula = Species~., data =  training)
#Summarize the model
summary(model)
#Visualize the decion tree model
plot(model)
text(model)
#Load the color brewer library
library(RColorBrewer)
#Create a color palatte
pallate<-brewer.pal(n = 3, "Set2")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = TRUE)
plot(model)
text(model)
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = TRUE)
#Plot the decion boundaries
partition.tree(tree = model)
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = TRUE)
#Plot the decion boundaries
partition.tree(tree = model, label = "Species", add = FALSE)
#LOad the data
data(iris)
#Set a seed to make randomness reproducable
set.seed(42)
#Randomly select 100 indexed out of 150 for training the model
indexes <- sample(
x = 1:150,
size = 100)
#Print the random indexed
indexes
#Create a traing data set
training <- iris[indexes,]
#Create a test data set
test <- iris[-indexes,]
#Load the descion tree package
library(tree)
#Create a decion tree model
model <- tree(
formula = Species ~ .,
data =  training)
#Summarize the model
summary(model)
#Visualize the decion tree model
plot(model)
text(model)
#Load the color brewer library
library(RColorBrewer)
#Create a color palatte
pallate<-brewer.pal(3, "Set2")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE)
install.packages("shiny")
library(shiny)
ui <- fluidPage(title = "Hello World")
runApp('shiny_demo.R')
runApp('shiny_demo.R')
runApp('shiny_demo.R')
#LOad the data
data(iris)
#Set a seed to make randomness reproducable
set.seed(42)
#Randomly select 100 indexed out of 150 for training the model
indexes <- sample(
x = 1:150,
size = 100)
#Print the random indexed
indexes
#Create a traing data set
training <- iris[indexes,]
#Create a test data set
test <- iris[-indexes,]
#Load the descion tree package
library(tree)
#Create a decion tree model
model <- tree(
formula = Species ~ Petal.Length + Petal.Width,
data =  training)
#Summarize the model
summary(model)
#Visualize the decion tree model
plot(model)
text(model)
#Load the color brewer library
library(RColorBrewer)
#Create a color palatte
pallate<-brewer.pal(3, "Set2")
#Create a scatterplot colored by speices
plot(x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = pallate[as.numeric(iris$Species)],
main = "Iris petal length vs width",
xlab = "Petal length",
ylab = "Petal width")
#Plot the decion boundaries
# Partioning might fail if the classification model has more than 2 predictors
partition.tree(tree = model,label="Species", add=TRUE)
#Predict with the model
predictions <- predict(object = model, newdata = test, type= "class")
#Create a confusion matrix
table(x=predictions,y=test$Species)
#Load the caret package
library(caret)
#Evaludate the prediction results
confusionMatrix(data=predictions,reference=test$Species)
#Set the owking directory
setwd("D:/datascience")
#Save the model
save(model, file="Tree.RData")
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
?predict
?predict
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
#LOad the data
data(iris)
#Set a seed to make randomness reproducable
set.seed(42)
#Randomly select 100 indexed out of 150 for training the model
indexes <- sample(
x = 1:150,
size = 100)
#Print the random indexed
indexes
#Create a traing data set
training <- iris[indexes,]
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
runApp('D:/test/shiny_demo.R')
